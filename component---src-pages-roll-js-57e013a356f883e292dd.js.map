{"version":3,"sources":["webpack:///./src/pages/roll.js"],"names":["MediaItem","id_str","media","isVideo","type","assetPath","media_url","media_url_https","split","pop","useState","isMuted","setIsMuted","className","controls","autoPlay","muted","loop","src","video_info","variants","sortedVariants","filter","variant","content_type","sort","a","b","bitrate","length","url","withPrefix","getVideoSource","poster","onClick","alt","loading","Post","post","tweet","full_text","created_at","hasMedia","extended_entities","date","Date","toLocaleDateString","year","month","day","trim","text","urlRegex","map","part","i","match","key","href","target","rel","linkifyText","index","RollPage","posts","setPosts","visibleCount","setVisibleCount","useEffect","sortedPosts","tweetsData","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","prev","addEventListener","removeEventListener","title","slice"],"mappings":"2MAsCMA,EAAY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACrBC,EAAyB,UAAfD,EAAME,MAAmC,iBAAfF,EAAME,KAE1CC,EAAS,gBAAmBJ,EAAnB,KADmBC,EAAMI,WAAaJ,EAAMK,iBA9BhDC,MAAM,KAAKC,MA4BiB,EAITC,oBAAS,GAAhCC,EAJgC,KAIvBC,EAJuB,KAkCvC,OACE,yBAAKC,UAAU,cACZV,EACC,2BACEW,UAAQ,EACRC,UAAU,EACVC,MAAOL,EACPM,KAAqB,iBAAff,EAAME,KACZc,IAnCe,WAErB,GAAIhB,EAAMiB,YAAcjB,EAAMiB,WAAWC,SAAU,CAEjD,IAKMC,EALcnB,EAAMiB,WAAWC,SAASE,QAC5C,SAAAC,GAAO,MAA6B,cAAzBA,EAAQC,gBAIcC,MACjC,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,SAAW,IAAMF,EAAEE,SAAW,MAI7C,GAAIP,EAAeQ,OAAS,EAC1B,OAAOR,EAAe,GAAGS,IAK7B,OAAOC,qBAAW1B,GAeP2B,GACLnB,UAAU,gBACVoB,OAAQF,qBAAW1B,GACnB6B,QAfiB,WACvBtB,GAAYD,MAiBR,yBACEO,IAAKa,qBAAW1B,GAChB8B,IAAI,GACJtB,UAAU,gBACVuB,QAAQ,WAQZC,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACiBA,EAAKC,MAAvCtC,EADiB,EACjBA,OAAQuC,EADS,EACTA,UAAWC,EADF,EACEA,WACrBC,EAAWJ,EAAKC,MAAMI,mBAAqBL,EAAKC,MAAMI,kBAAkBzC,MACxE0C,EAAO,IAAIC,KAAKJ,GAAYK,mBAAmB,QAAS,CAC5DC,KAAM,UACNC,MAAO,OACPC,IAAK,YAIP,OAAKT,GAAcE,EAGjB,yBAAK7B,UAAU,QACb,yBAAKA,UAAU,aAAa+B,GAE3BJ,GAAcA,EAAUU,OAAOrB,OAAS,GAAK,yBAAKhB,UAAU,aApG/C,SAACsC,GACnB,IAAKA,EAAM,MAAO,GAElB,IAAMC,EAAW,uBACjB,OAAOD,EAAK3C,MAAM4C,GAAUC,KAAI,SAACC,EAAMC,GAErC,OAAID,EAAKE,MAAMJ,GAEX,uBACEK,IAAKF,EACLG,KAAMJ,EACNK,OAAO,SACPC,IAAI,uBAEHN,GAKAA,KAiFqEO,CAAYrB,IAErFE,GACC,yBAAK7B,UAAU,mBACZyB,EAAKC,MAAMI,kBAAkBzC,MAAMmD,KAAI,SAACnD,EAAO4D,GAAR,OACtC,kBAAC9D,EAAD,CACEyD,IAAKK,EACL7D,OAAQA,EACRC,MAAOA,SAdiB,MAoEvB6D,UA5CE,WAAO,IAAD,EACKrD,mBAAS,IAA5BsD,EADc,KACPC,EADO,OAEmBvD,mBAAS,IAA1CwD,EAFc,KAEAC,EAFA,KA2BrB,OAvBAC,qBAAU,WAER,IAAMC,EAAc,YAAIC,KAAY7C,MAAK,SAACC,EAAGC,GAC3C,OAAO,IAAIkB,KAAKlB,EAAEY,MAAME,YAAc,IAAII,KAAKnB,EAAEa,MAAME,eAIzDwB,EAASI,GAGT,IAAME,EAAe,WAEjBC,OAAOC,YAAcC,SAASC,gBAAgBC,WAC9CF,SAASC,gBAAgBE,aAAe,KAExCV,GAAgB,SAAAW,GAAI,OAAIA,EAAO,OAKnC,OADAN,OAAOO,iBAAiB,SAAUR,GAC3B,kBAAMC,OAAOQ,oBAAoB,SAAUT,MACjD,IAGD,yBAAK1D,UAAU,kBACb,kBAAC,IAAD,CAAQoE,MAAM,uBAEd,yBAAKpE,UAAU,gBACZmD,EAAMkB,MAAM,EAAGhB,GAAcb,KAAI,SAACf,EAAMwB,GAAP,OAChC,kBAACzB,EAAD,CAAMoB,IAAKK,EAAOxB,KAAMA,OAGzB4B,EAAeF,EAAMnC,QACpB,yBAAKhB,UAAU,aAAf,uB","file":"component---src-pages-roll-js-57e013a356f883e292dd.js","sourcesContent":["import \"../pages/example.less\";\nimport \"../styles/roll.css\";\n\nimport { withPrefix } from \"gatsby-link\";\nimport React, { useState, useEffect } from \"react\";\nimport Helmet from \"react-helmet\";\nimport tweetsData from \"../data/filtered_tweets\";\n\n// Utility function to extract filename from URL\nconst getFilename = (url) => {\n  return url.split('/').pop();\n};\n\n// Function to convert plain text URLs to clickable links\nconst linkifyText = (text) => {\n  if (!text) return \"\";\n  // URL regex pattern\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  return text.split(urlRegex).map((part, i) => {\n    // If this part matches the URL pattern, make it a link\n    if (part.match(urlRegex)) {\n      return (\n        <a \n          key={i}\n          href={part}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {part}\n        </a>\n      );\n    }\n    // Otherwise just return the text\n    return part;\n  });\n};\n\n// Component for rendering media (images or videos)\nconst MediaItem = ({ id_str, media }) => {\n  const isVideo = media.type === \"video\" || media.type === \"animated_gif\";\n  const mediaFilename = getFilename(media.media_url || media.media_url_https);\n  const assetPath = `/good_assets/${id_str}-${mediaFilename}`;\n  const [isMuted, setIsMuted] = useState(true);\n  \n  // Get the best video source from video_info if available\n  const getVideoSource = () => {\n    // If we have video_info with variants, use the highest quality mp4\n    if (media.video_info && media.video_info.variants) {\n      // Filter for mp4 sources\n      const mp4Variants = media.video_info.variants.filter(\n        variant => variant.content_type === \"video/mp4\"\n      );\n      \n      // Sort by bitrate (highest first)\n      const sortedVariants = mp4Variants.sort(\n        (a, b) => (b.bitrate || 0) - (a.bitrate || 0)\n      );\n      \n      // Return the URL of the best quality variant, or fall back to local asset\n      if (sortedVariants.length > 0) {\n        return sortedVariants[0].url;\n      }\n    }\n    \n    // Fall back to local asset if no video_info or no valid variants\n    return withPrefix(assetPath);\n  };\n\n  const handleVideoClick = () => {\n    setIsMuted(!isMuted);\n  };\n  \n  return (\n    <div className=\"media-item\">\n      {isVideo ? (\n        <video \n          controls\n          autoPlay={true}\n          muted={isMuted}\n          loop={media.type === \"animated_gif\"}\n          src={getVideoSource()}\n          className=\"media-content\"\n          poster={withPrefix(assetPath)}\n          onClick={handleVideoClick}\n        />\n      ) : (\n        <img \n          src={withPrefix(assetPath)}\n          alt=\"\"\n          className=\"media-content\"\n          loading=\"lazy\"\n        />\n      )}\n    </div>\n  );\n};\n\n// Post Component\nconst Post = ({ post }) => {\n  const { id_str, full_text, created_at } = post.tweet;\n  const hasMedia = post.tweet.extended_entities && post.tweet.extended_entities.media;\n  const date = new Date(created_at).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long', \n    day: 'numeric'\n  });\n\n  // Skip rendering if there's no text and no media\n  if (!full_text && !hasMedia) return null;\n\n  return (\n    <div className=\"post\">\n      <div className=\"post-date\">{date}</div>\n      \n      {full_text  && full_text.trim().length > 0 && <div className=\"post-text\">{linkifyText(full_text)}</div>}\n      \n      {hasMedia && (\n        <div className=\"media-container\">\n          {post.tweet.extended_entities.media.map((media, index) => (\n            <MediaItem \n              key={index}\n              id_str={id_str} \n              media={media}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main Page Component\nconst RollPage = () => {\n  const [posts, setPosts] = useState([]);\n  const [visibleCount, setVisibleCount] = useState(15);\n\n  useEffect(() => {\n    // Sort the tweets data by created_at date (newest first)\n    const sortedPosts = [...tweetsData].sort((a, b) => {\n      return new Date(b.tweet.created_at) - new Date(a.tweet.created_at);\n    });\n    \n    // Set the sorted posts data\n    setPosts(sortedPosts);\n    \n    // Add scroll listener for infinite scroll\n    const handleScroll = () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop >= \n        document.documentElement.offsetHeight - 500\n      ) {\n        setVisibleCount(prev => prev + 10);\n      }\n    };\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div className=\"roll-container\">\n      <Helmet title=\"Roll | Max Bittker\" />\n      \n      <div className=\"roll-content\">\n        {posts.slice(0, visibleCount).map((post, index) => (\n          <Post key={index} post={post} />\n        ))}\n        \n        {visibleCount < posts.length && (\n          <div className=\"load-more\">Loading more...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RollPage; "],"sourceRoot":""}