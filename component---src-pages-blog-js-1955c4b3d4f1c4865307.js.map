{"version":3,"sources":["webpack:///./src/components/hradio.js","webpack:///./src/components/post-link.js","webpack:///./src/pages/blog.js"],"names":["checkedradio","HRadio","createReactClass","displayName","render","_this$props","this","props","n","flip","type","window","matchMedia","matches","array","Array","from","Math","floor","keys","React","createElement","className","aria-hidden","style","flexWrap","map","i","key","defaultChecked","tabIndex","onClick","e","thisradio","target","checked","PostLink","_ref","post","margin","Link","display","to","frontmatter","path","flexGrow","title","video","whiteSpace","color","date","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","id"],"mappings":"2FAAA,IAGIA,EAHJ,iCAKMC,EALN,MAKeC,GAAiB,CAAAC,YAAA,SAC9BC,OAAM,WACJ,IAAAC,EAAwBC,KAAKC,MAAvBC,EAACH,EAADG,EAAGC,EAAIJ,EAAJI,KAAMC,EAAIL,EAAJK,KACO,oBAAXC,QACLA,OAAOC,WAAW,sBAAsBC,UAC1CL,GAAQ,KAGZ,IAAIM,EAAQC,MAAMC,KAAKD,MAAME,KAAKC,MAAMV,IAAIW,QAE5C,OACEC,IAAAC,cAAA,OACEC,UAAU,SACVC,cAAY,OACZC,MAAO,CACLC,SAAUhB,EAAO,eAAiB,SAGnCK,EAAMY,KAAI,SAAAC,GAAC,OACVP,IAAAC,cAAA,SACEO,IAAKD,EACLjB,KAAMA,GAAc,QACpBmB,eAAgBF,EAAI,EACpBG,SAAS,KACTC,QAAS,SAAAC,GACP,IAAIC,EAAYD,EAAEE,OAIdlC,IAAiBiC,GACnBA,EAAUE,SAAU,EACpBnC,EAAe,MAEfA,EAAeiC,GAGnBT,MACE,YAUCvB,O,uFCjCAmC,G,UAfE,SAAHC,GAAA,IAAMC,EAAID,EAAJC,KAAI,OACtBlB,IAAAC,cAAA,OAAKG,MAAO,CAAEe,OAAQ,WACpBnB,IAAAC,cAACmB,IAAI,CAAChB,MAAO,CAAEiB,QAAS,QAAUC,GAAI,IAAMJ,EAAKK,YAAYC,MAC3DxB,IAAAC,cAAA,KAAGG,MAAO,CAAEqB,SAAU,IACnBP,EAAKK,YAAYG,MACjBR,EAAKK,YAAYI,OAAK,YAAgBT,EAAKK,YAAYI,MAAK,MAG/D3B,IAAAC,cAAA,SAAOG,MAAO,CAAEwB,WAAY,SAAUC,MAAO,UAC1CX,EAAKK,YAAYO,U,oBCUXC,UAjBG,SAAHd,GAIR,IACCe,EAHsBf,EAD5BgB,KACEC,kBAAqBC,MAIpBC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKf,YAAYO,QACvCxB,KAAI,SAAA+B,GAAI,OAAIrC,IAAAC,cAACe,EAAQ,CAACR,IAAK6B,EAAKC,KAAKC,GAAIrB,KAAMmB,EAAKC,UAEvD,OACEtC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,sBACH+B,K","file":"component---src-pages-blog-js-1955c4b3d4f1c4865307.js","sourcesContent":["import React from \"react\";\nimport createReactClass from \"create-react-class\";\n\nvar checkedradio;\n\nconst HRadio = createReactClass({\n  render() {\n    let { n, flip, type } = this.props;\n    if (typeof window !== \"undefined\") {\n      if (window.matchMedia(\"(max-width: 700px)\").matches) {\n        n = n / 3.1;\n      }\n    }\n    let array = Array.from(Array(Math.floor(n)).keys());\n\n    return (\n      <div\n        className=\"hradio\"\n        aria-hidden=\"true\"\n        style={{\n          flexWrap: flip ? \"wrap-reverse\" : \"wrap\"\n        }}\n      >\n        {array.map(i => (\n          <input\n            key={i}\n            type={type ? type : \"radio\"}\n            defaultChecked={i % 2}\n            tabIndex=\"-1\"\n            onClick={e => {\n              let thisradio = e.target;\n              // if (thisradio.defaultChecked) {\n              //   checkedradio = thisradio;\n              // }\n              if (checkedradio === thisradio) {\n                thisradio.checked = false;\n                checkedradio = null;\n              } else {\n                checkedradio = thisradio;\n              }\n            }}\n            style={\n              {\n                // cursor: cursors[i % cursors.length]\n              }\n            }\n          />\n        ))}\n      </div>\n    );\n  }\n});\nexport default HRadio;\n","import React from \"react\";\nimport Link from \"gatsby-link\";\nimport HRadio from \"./hradio.js\";\n\nconst PostLink = ({ post }) => (\n  <div style={{ margin: \"0 1em \" }}>\n    <Link style={{ display: \"flex\" }} to={\"/\" + post.frontmatter.path}>\n      <p style={{ flexGrow: 1 }}>\n        {post.frontmatter.title}\n        {post.frontmatter.video && ` [Video, ${post.frontmatter.video}] `}\n      </p>\n\n      <small style={{ whiteSpace: \"nowrap\", color: \"black\" }}>\n        {post.frontmatter.date}\n      </small>\n    </Link>\n  </div>\n);\n\nexport default PostLink;\n","import React from \"react\";\nimport PostLink from \"../components/post-link\";\n\nimport \"../layouts/index.css\";\nimport \"../pages/example.less\";\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges }\n  }\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />);\n\n  return (\n    <div>\n      <h1>Writing & Speaking</h1>\n      {Posts}\n    </div>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            video\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}